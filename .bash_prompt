# @gf3’s Sexy Bash Prompt, inspired by “Extravagant Zsh Prompt”
# Shamelessly copied from https://github.com/gf3/dotfiles
# Screenshot: http://i.imgur.com/s0Blh.png

if [[ $COLORTERM = gnome-* && $TERM = xterm ]] && infocmp gnome-256color >/dev/null 2>&1; then
    export TERM=gnome-256color
elif infocmp xterm-256color >/dev/null 2>&1; then
    export TERM=xterm-256color
fi

# if tput setaf 1 &> /dev/null; then
#     tput sgr0
#     if [[ $(tput colors) -ge 256 ]] 2>/dev/null; then
#         MAGENTA=$(tput setaf 9)
#         ORANGE=$(tput setaf 172)
#         GREEN=$(tput setaf 190)
#         PURPLE=$(tput setaf 141)
#         WHITE=$(tput setaf 256)
#     else
#         MAGENTA=$(tput setaf 5)
#         ORANGE=$(tput setaf 4)
#         GREEN=$(tput setaf 2)
#         PURPLE=$(tput setaf 1)
#         WHITE=$(tput setaf 7)
#     fi
#     BOLD=$(tput bold)
#     RESET=$(tput sgr0)
# else
    MAGENTA="\033[1;31m"
    ORANGE="\033[1;33m"
    GREEN="\033[1;32m"
    PURPLE="\033[1;35m"
    WHITE="\033[1;37m"
    BOLD=""
    RESET="\033[m"
# fi

export MAGENTA
export ORANGE
export GREEN
export PURPLE
export WHITE
export BOLD
export RESET

# get current branch in git repo
function parse_git_branch() {
   BRANCH=`git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/\1/'`
   if [ ! "${BRANCH}" == "" ]
   then
      STAT=`parse_git_dirty`
      echo "[${BRANCH}${STAT}]"
   else
      echo ""
   fi
}

# get current status of git repo
function parse_git_dirty {
   status=`git status 2>&1 | tee`
   dirty=`echo -n "${status}" 2> /dev/null | grep "modified:" &> /dev/null; echo "$?"`
   untracked=`echo -n "${status}" 2> /dev/null | grep "Untracked files" &> /dev/null; echo "$?"`
   ahead=`echo -n "${status}" 2> /dev/null | grep "Your branch is ahead of" &> /dev/null; echo "$?"`
   newfile=`echo -n "${status}" 2> /dev/null | grep "new file:" &> /dev/null; echo "$?"`
   renamed=`echo -n "${status}" 2> /dev/null | grep "renamed:" &> /dev/null; echo "$?"`
   deleted=`echo -n "${status}" 2> /dev/null | grep "deleted:" &> /dev/null; echo "$?"`
   bits=''
   if [ "${renamed}" == "0" ]; then
      bits=">${bits}"
   fi
   if [ "${ahead}" == "0" ]; then
      bits="*${bits}"
   fi
   if [ "${newfile}" == "0" ]; then
      bits="+${bits}"
   fi
   if [ "${untracked}" == "0" ]; then
      bits="?${bits}"
   fi
   if [ "${deleted}" == "0" ]; then
      bits="x${bits}"
   fi
   if [ "${dirty}" == "0" ]; then
      bits="!${bits}"
   fi
   if [ ! "${bits}" == "" ]; then
      echo " ${bits}"
   else
      echo ""
   fi
}

function nonzero_return() {
   RETVAL=$?
   [ $RETVAL -ne 0 ] && echo " ($RETVAL)"
}

# \[
#     begin a sequence of non-printing characters, which could be used to embed a terminal control sequence into the prompt
#     this includes adding in control characters which change the color of the prompt
# \]
#     end a sequence of non-printing characters

PS1="\[$MAGENTA\]\u\[$WHITE\] on \[$MAGENTA\]\h\[$WHITE\]:"
PS1="${PS1} \[$GREEN\]\w \[$MAGENTA\]\`nonzero_return\`"
PS1="${PS1} \[$WHITE\]\`parse_git_branch\`\n\[$GREEN\]\T \[$RESET\]\$ "

export PS1
export PS2="continue-> "